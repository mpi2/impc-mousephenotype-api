image: $CI_REGISTRY/mouse-informatics/docker:latest

variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using the Kubernetes executor, the variable should be set to
  # tcp://localhost:2375/ because of how the Kubernetes executor connects services
  # to the job container
  # DOCKER_HOST: tcp://localhost:2375/
  #
  # For non-Kubernetes executors, we use tcp://docker:2375/
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2

  # Since the docker:dind container and the runner container don’t share their root
  # filesystem, the job’s working directory can be used as a mount point for children
  # containers. For example, if you have files you want to share with a child container,
  # you may create a subdirectory under /builds/$CI_PROJECT_PATH and use it as your
  # mount point.
  MOUNT_POINT: /builds/$CI_PROJECT_PATH/mnt

  # For EBI you need to override the definition of CI_REGISTRY to remove the port number
  CI_REGISTRY: dockerhub.ebi.ac.uk
  CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH

  #NOW: $(date '+%Y-%m-%d-%H-%M-%S')
  #NOW: $(date '+%Y-%m-%d')

  # To solve the issue with the Docker in Docker 19.03 service.
  # Logged as: GitLab.com CI jobs failing if using docker:stable-dind image
  # see: https://gitlab.com/gitlab-com/gl-infra/production/issues/982
  DOCKER_TLS_CERTDIR: ""



stages:
  #   - env
  - build
  - dev-deploy
  - prod-deploy

# env:
#   stage: env
#   script:
#     - export


build_main_image:
  stage: build
  services:
    - name: $CI_REGISTRY/mouse-informatics/dind:latest
      alias: docker
  rules:
    - if: '$CI_BUILD_REF_NAME == "main" && $CI_PIPELINE_SOURCE != "schedule"'
      when: on_success
  before_script:
    - mkdir -p "$MOUNT_POINT"
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin  ${CI_REGISTRY}
  script:
    - |
      if [[ "${REQUIRES_REBUILD_IMAGE}" == "true" ]]; then
          echo "Building latest image"

          sed -i "s|FROM maven|FROM ${LOCAL_GITLAB_MAVEN_IMAGE}|g" Dockerfile       
          sed -i "s|FROM openjdk|FROM ${LOCAL_GITLAB_OPENJDK_IMAGE}|g" Dockerfile       
          
          docker build -t "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHA:0:12}" -t "${CI_REGISTRY_IMAGE}":latest -f Dockerfile .  | tee ${MOUNT_POINT}/build.log
          
          docker push "${CI_REGISTRY_IMAGE}":latest  | tee ${MOUNT_POINT}/push.log
          docker push "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHA:0:12}"  | tee ${MOUNT_POINT}/push.log

          docker logout ${CI_REGISTRY}


          echo "Pushing to docker hub"
          echo "${DOCKER_HUB_PWD}" | docker login --username "${DOCKER_HUB_USER}" --password-stdin

          docker tag "${CI_REGISTRY_IMAGE}":latest "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":latest
          docker tag "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHA:0:12}" "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":"${CI_COMMIT_SHA:0:12}"

          docker push "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":latest  | tee ${MOUNT_POINT}/dockerhub-push-latest.log
          docker push "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":"${CI_COMMIT_SHA:0:12}"  | tee ${MOUNT_POINT}/dockerhub-push-latest.log

      fi
    - docker logout

  artifacts:
    paths:
      - "$MOUNT_POINT/"


hx-dev:
  stage: dev-deploy
  image: $CI_REGISTRY/mouse-informatics/helm-kubectl-alpine:latest
  rules:
    - if: '$PRODUCTION_DEPLOYMENT != "true" && $CI_PROJECT_NAMESPACE == "mouse-informatics" && $CI_BUILD_REF_NAME == "main"'
  script:
    # Only deploy from the MPI2 impc-mousephenotype-api repository rather than repository forks
    - |
      if [ ! -z ${HX_KUBERNETES_ENDPOINT+set} ]; then

        kubectl config set-cluster local --server="${HX_KUBERNETES_ENDPOINT}"
        kubectl config set clusters.local.certificate-authority-data "${HX_KUBERNETES_CERTIFICATE_AUTHORITY_DATA}"
        kubectl config set-credentials ${HX_KUBERNETES_DEV_USER} --token="${HX_KUBERNETES_DEV_USER_TOKEN}"
        kubectl config set-context "${HX_KUBERNETES_DEV_NAMESPACE}" --cluster=local --user=${HX_KUBERNETES_DEV_USER} --namespace="${HX_KUBERNETES_DEV_NAMESPACE}"
        kubectl config use-context "${HX_KUBERNETES_DEV_NAMESPACE}"
        kubectl version

        sed -i "s/STRING_REPLACED_DURING_REDEPLOY/$(date)/g" k8-deploy/dev/impc-api-service-deployment.yaml

        if kubectl apply -f k8-deploy/dev/impc-api-service-deployment.yaml --record | grep -q unchanged; then
            echo "=> Patching deployment to force image update."
            kubectl patch -f k8-deploy/dev/impc-api-service-deployment.yaml --record -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"ci-last-updated\":\"$(date +'%s')\"}}}}}"
        else
            echo "=> Deployment apply has changed the object, no need to force image update."
        fi

        kubectl get pod,deployment,rs,svc,ing
      fi



hh-prod:
  stage: prod-deploy
  image: $CI_REGISTRY/mouse-informatics/helm-kubectl-alpine:latest
  rules:
    - if: '$PRODUCTION_DEPLOYMENT != "true" && $CI_PROJECT_NAMESPACE == "mouse-informatics" && $CI_BUILD_REF_NAME == "main"'
  script:
    # Only deploy from the MPI2 impc-mousephenotype-api repository rather than repository forks
    - |
      if [ ! -z ${HH_KUBERNETES_ENDPOINT+set} ]; then

        kubectl config set-cluster local --server="${HH_KUBERNETES_ENDPOINT}"
        kubectl config set clusters.local.certificate-authority-data "${HH_KUBERNETES_CERTIFICATE_AUTHORITY_DATA}"
        kubectl config set-credentials ${HH_KUBERNETES_PROD_USER} --token="${HH_KUBERNETES_PROD_USER_TOKEN}"
        kubectl config set-context "${HH_KUBERNETES_PROD_NAMESPACE}" --cluster=local --user=${HH_KUBERNETES_PROD_USER} --namespace="${HH_KUBERNETES_PROD_NAMESPACE}"
        kubectl config use-context "${HH_KUBERNETES_PROD_NAMESPACE}"
        kubectl version

        sed -i "s/STRING_REPLACED_DURING_REDEPLOY/$(date)/g" k8-deploy/prod/impc-api-service-deployment.yaml

        if kubectl apply -f k8-deploy/prod/impc-api-service-deployment.yaml --record | grep -q unchanged; then
            echo "=> Patching deployment to force image update."
            kubectl patch -f k8-deploy/prod/impc-api-service-deployment.yaml --record -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"ci-last-updated\":\"$(date +'%s')\"}}}}}"
        else
            echo "=> Deployment apply has changed the object, no need to force image update."
        fi

        kubectl get pod,deployment,rs,svc,ing
      fi


hx-prod:
  stage: prod-deploy
  image: $CI_REGISTRY/mouse-informatics/helm-kubectl-alpine:latest
  rules:
    - if: '$PRODUCTION_DEPLOYMENT != "true" && $CI_PROJECT_NAMESPACE == "mouse-informatics" && $CI_BUILD_REF_NAME == "main"'
  script:
    # Only deploy from the MPI2 impc-mousephenotype-api repository rather than repository forks
    - |
      if [ ! -z ${HX_KUBERNETES_ENDPOINT+set} ]; then

        kubectl config set-cluster local --server="${HX_KUBERNETES_ENDPOINT}"
        kubectl config set clusters.local.certificate-authority-data "${HX_KUBERNETES_CERTIFICATE_AUTHORITY_DATA}"
        kubectl config set-credentials ${HX_KUBERNETES_PROD_USER} --token="${HX_KUBERNETES_PROD_USER_TOKEN}"
        kubectl config set-context "${HX_KUBERNETES_PROD_NAMESPACE}" --cluster=local --user=${HX_KUBERNETES_PROD_USER} --namespace="${HX_KUBERNETES_PROD_NAMESPACE}"
        kubectl config use-context "${HX_KUBERNETES_PROD_NAMESPACE}"
        kubectl version

        sed -i "s/STRING_REPLACED_DURING_REDEPLOY/$(date)/g" k8-deploy/prod/impc-api-service-deployment.yaml

        if kubectl apply -f k8-deploy/prod/impc-api-service-deployment.yaml --record | grep -q unchanged; then
            echo "=> Patching deployment to force image update."
            kubectl patch -f k8-deploy/prod/impc-api-service-deployment.yaml --record -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"ci-last-updated\":\"$(date +'%s')\"}}}}}"
        else
            echo "=> Deployment apply has changed the object, no need to force image update."
        fi

        kubectl get pod,deployment,rs,svc,ing
      fi